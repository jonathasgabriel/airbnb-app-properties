{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.resetAll = resetAll;\nexports.setDefaultOutDelay = setDefaultOutDelay;\nexports.setModalSetIdsHandler = setModalSetIdsHandler;\nexports.clearModalSetIdsHandler = clearModalSetIdsHandler;\nexports.setModalSetHandler = setModalSetHandler;\nexports.clearModalSetHandler = clearModalSetHandler;\nexports.mountModal = mountModal;\nexports.updateModal = updateModal;\nexports.unmountModal = unmountModal;\nvar nextIdValue = 1;\nvar hasContainer = false;\nvar defaultOutDelay = 0;\nvar modalSets = {};\nvar setHandlers = {};\n\nvar setIdsHandler = function setIdsHandler() {};\n\nfunction resetAll() {\n  modalSets = {};\n  setHandlers = {};\n  defaultOutDelay = 0;\n}\n\nfunction setDefaultOutDelay(outDelay) {\n  defaultOutDelay = outDelay;\n}\n\nfunction setModalSetIdsHandler(handler) {\n  hasContainer = true;\n  setIdsHandler = handler;\n  handler(getSetIds());\n}\n\nfunction clearModalSetIdsHandler() {\n  setIdsHandler = function setIdsHandler() {};\n}\n\nfunction setModalSetHandler(id, handler) {\n  hasContainer = true;\n  setHandlers[id] = handler;\n  handler(modalSets[id] || []);\n}\n\nfunction clearModalSetHandler(id) {\n  delete setHandlers[id];\n}\n\nfunction mountModal(info) {\n  if (firstMount() && !hasContainer) {\n    setTimeout(warnIfNoContainer, 1000);\n  }\n\n  var id = nextId();\n  info = Object.assign({\n    setId: 0\n  }, info);\n  if (typeof info.outDelay === 'undefined') info.outDelay = defaultOutDelay;\n  var setId = info.setId;\n  var notifySetIds = false;\n\n  if (!modalSets[setId]) {\n    modalSets[setId] = [];\n    notifySetIds = true;\n  }\n\n  modalSets[setId].push({\n    id: id,\n    info: info,\n    setId: setId\n  });\n  modalSets[setId].sort(compareModals);\n\n  if (notifySetIds) {\n    setIdsHandler(getSetIds());\n  }\n\n  if (setHandlers[setId]) {\n    setHandlers[setId](modalSets[setId]);\n  }\n\n  return id;\n}\n\nfunction updateModal(id, info) {\n  var setIds = getSetIds();\n  var foundSetId = void 0;\n  setIds.forEach(function (setId) {\n    modalSets[setId] = modalSets[setId].map(function (modal) {\n      if (modal.id === id) {\n        foundSetId = setId;\n        return {\n          id: id,\n          info: info\n        };\n      }\n\n      return modal;\n    });\n  });\n\n  if (typeof foundSetId === 'undefined') {\n    console.log('react-router-modal: updateModal with bad id', id); //eslint-disable-line\n  } else {\n    var handler = setHandlers[foundSetId];\n    if (handler) handler(modalSets[foundSetId]);\n  }\n}\n\nfunction getSetIds() {\n  return Object.keys(modalSets).map(function (id) {\n    return parseInt(id, 10);\n  });\n}\n\nfunction compareModals(a, b) {\n  var stackOrderDiff = (a.info.stackOrder || 0) - (b.info.stackOrder || 0);\n  if (stackOrderDiff !== 0) return stackOrderDiff;\n  return a.id - b.id;\n}\n\nfunction findModalById(id) {\n  var setIds = getSetIds();\n\n  for (var i = 0; i < setIds.length; i++) {\n    var modals = modalSets[setIds[i]];\n\n    for (var j = 0; j < modals.length; j++) {\n      if (modals[j].id === id) return modals[j].info;\n    }\n  }\n}\n\nfunction unmountModal(id) {\n  var modal = findModalById(id);\n  if (!modal) return;\n\n  if (modal.outDelay) {\n    var updated = _extends({}, modal, {\n      out: true\n    });\n\n    updateModal(id, updated);\n    return setTimeout(removeModal.bind(null, id), modal.outDelay);\n  } else {\n    removeModal(id);\n  }\n}\n\nfunction removeModal(id) {\n  var setIds = getSetIds();\n  var foundSetId = void 0;\n  setIds.forEach(function (setId) {\n    modalSets[setId] = modalSets[setId].filter(function (modal) {\n      if (modal.id === id) {\n        foundSetId = setId;\n        return false;\n      }\n\n      return true;\n    });\n  });\n\n  if (typeof foundSetId !== 'undefined') {\n    if (modalSets[foundSetId].length === 0) {\n      delete modalSets[foundSetId];\n    }\n\n    setIdsHandler(getSetIds());\n    var handler = setHandlers[foundSetId];\n    if (handler) handler(modalSets[foundSetId] || []);\n  }\n}\n\nfunction firstMount() {\n  return nextIdValue === 0;\n}\n\nfunction nextId() {\n  return nextIdValue++;\n}\n\nfunction warnIfNoContainer() {\n  if (!hasContainer) {\n    console.log('react-router-modal warning: Modal was mounted but no <ModalContainer /> found'); //eslint-disable-line\n  }\n}","map":null,"metadata":{},"sourceType":"script"}