{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n}; // eslint-disable-line no-unused-vars\n\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactRouterDom = require('react-router-dom');\n\nvar _modal = require('./modal');\n\nvar _modal2 = _interopRequireDefault(_modal);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getStackOrder(match) {\n  // order routed modals behind any directly instantiated modals\n  return match.url.length - 10000;\n}\n/**\n* A react-router Route that shows a modal when the location pathname matches.\n*\n* @param {Object} props\n* @param {String} props.path path to match\n* @param {Boolean} props.exact If set, only show modal if route exactly matches path.\n* @param {String} props.parentPath path to navigate to when backdrop is clicked\n* @param {String} props.onBackdropClick Handler to invoke when backdrop is clicked. If set, overrides the navigation to parentPath, so you need to handle that yourself.\n*\n* @param {String} props.className class name to apply to modal container\n*\n* @param {Children} props.children modal content can be specified as chld elements\n* @param {ReactComponent} props.component modal content can be specified as a component type. The component will be passed `parentPath` and `closeModal` props, in addition to the specified props, and the withRouter props.\n*\n* @param {Object} props.props Props to be passed to the react component specified by the component property.\n\n* @param {String} [props.inClassName=react-router-modal__modal--in] class name applied to modal immediately after it is shown to allow for css transitions\n* @param {String} [props.outClassName=react-router-modal__modal--out] class name applied to modal before modal is hidden to allow for css transitions\n* @param {String} [props.backdropClassName=react-router-modal__backdrop] class name applied to backdrop\n* @param {String} [props.backdropInClassName=react-router-modal__backdrop--in] class name applied to backdrop immediately after it is shown to allow for css transitions\n* @param {String} [props.backdropOutClassName=react-router-modal__backdrop--out] class name applied to backdrop before modal is hidden to allow for css transitions\n* @param {String} [props.outDelay=0] delay, in milliseconds to wait when closing modal, to allow for css transitions to complete before ripping it out of the DOM\n*\n* When the route matches, the modal is shown.\n* If multiple routes match, the modals will be stacked based on the length of the path that is matched.\n*\n* The component rendered in the modal will receive the following props:\n*\n* @param {string} parentPath - Either the parentPath specified in the ModalRoute, or a calculated value based on matched url\n* @param {string} closeModal A convenience method to close the modal by navigating to the parentPath\n*/\n\n\nfunction ModalRoute(routeProps) {\n  var path = routeProps.path,\n      parentPath = routeProps.parentPath,\n      exact = routeProps.exact,\n      props = routeProps.props,\n      onBackdropClick = routeProps.onBackdropClick;\n\n  var modalProps = _extends({}, routeProps);\n\n  delete modalProps.exact;\n  delete modalProps.path;\n  delete modalProps.parentPath;\n  delete modalProps.onBackdropClick;\n  delete modalProps.props;\n\n  var getParentPath = function getParentPath(match) {\n    if (typeof parentPath === 'function') {\n      return parentPath(match);\n    }\n\n    if (parentPath) return parentPath;\n    if (match.params[0]) return match.params[0];\n    if (match.params[0] === '') return '/';\n    return match.url;\n  };\n\n  return _react2.default.createElement(_reactRouterDom.Route, {\n    path: path,\n    exact: exact,\n    render: function render(_ref) {\n      var match = _ref.match,\n          location = _ref.location,\n          history = _ref.history;\n      return _react2.default.createElement(_modal2.default, _extends({}, modalProps, {\n        props: _extends({}, props, {\n          match: match,\n          location: location,\n          history: history,\n          parentPath: getParentPath(match),\n          closeModal: function closeModal() {\n            return history.push(getParentPath(match));\n          }\n        }),\n        stackOrder: getStackOrder(match),\n        onBackdropClick: onBackdropClick || function () {\n          return history.push(getParentPath(match));\n        }\n      }));\n    }\n  });\n}\n\nexports.default = (0, _reactRouterDom.withRouter)(ModalRoute);\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}